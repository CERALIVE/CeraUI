name: Manual Release Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        default: ''
      branches:
        description: 'Comma-separated list of branches to build (e.g., main,extended)'
        required: true
        default: 'main,extended'

# Add explicit permissions for creating releases
permissions:
  contents: write
  packages: write
  actions: write

jobs:
  prepare_release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag_name: ${{ steps.get_version.outputs.tag_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          VERSION="${{ github.event.inputs.version || '0.0.1' }}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag_name=v${VERSION}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Simply specify the main branch as target to create a new tag
          gh release create ${{ steps.get_version.outputs.tag_name }} \
            --title "CeraUI v${{ steps.get_version.outputs.version }}" \
            --target main \
            --notes "# CeraUI Release v${{ steps.get_version.outputs.version }}

            This release contains builds for the following branches: ${{ github.event.inputs.branches }}
            
            ## Downloads
            
            $(if [[ "${{ github.event.inputs.branches }}" == *"main"* ]]; then echo "- ceraui-main-v${{ steps.get_version.outputs.version }}.tar.xz - Standard version"; fi)
            $(if [[ "${{ github.event.inputs.branches }}" == *"extended"* ]]; then echo "- ceraui-extended-v${{ steps.get_version.outputs.version }}.tar.xz - Extended version with additional features"; fi)
            
            ðŸ¤– Generated with GitHub Actions" \
            --draft

  prepare_branches:
    runs-on: ubuntu-latest
    needs: prepare_release
    outputs:
      branch_list: ${{ steps.set-branches.outputs.branch_list }}
    steps:
      - id: set-branches
        run: |
          BRANCHES="${{ github.event.inputs.branches }}"
          # Convert comma-separated list to JSON array without using trim
          JSON_ARRAY=$(echo $BRANCHES | jq -R -c 'split(",") | map(. | gsub("^\\s+|\\s+$"; ""))')
          echo "branch_list=${JSON_ARRAY}" >> $GITHUB_OUTPUT

  build_branch:
    needs: [prepare_release, prepare_branches]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJSON(needs.prepare_branches.outputs.branch_list) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branch }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.branch }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.branch }}-

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build

      - name: Package distribution files
        run: |
          mkdir -p release
          tar -C dist -cf - . | xz -9e > release/ceraui-${{ matrix.branch }}.tar.xz

      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Upload the asset to the release
          gh release upload ${{ needs.prepare_release.outputs.tag_name }} \
            ./release/ceraui-${{ matrix.branch }}.tar.xz
